import React from 'react'import PropTypes from 'prop-types'import styled from 'styled-components'import colors from 'assets/css/partials/_variables.scss'const BaseButton = styled.button.attrs(props => ({  type: props.type ? props.type : 'button'}))`  display: -webkit-inline-box;  display: -ms-inline-flexbox;  display: inline-flex;  outline: 0 none;  text-decoration: none;  -webkit-transition: all 0.3s;  transition: all 0.3s;  width: ${props =>    props.fullwidth ? '100%' : props.width ? props.width : 'auto'};  height: ${props => props.height};  padding: ${props => (props.padding ? props.padding : '10px 25px')};  margin: ${props => props.margin};  text-transform: ${props =>    props.uppercase ? 'uppercase' : props.capitalize ? 'capitalize' : 'none'};  font-family: 'Montserrat', Helvetica, sans-serif;  font-size: ${props => (props.size ? props.size : '12px')};  font-weight: ${props => (props.bold ? '700' : '600')};  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};  opacity: ${props => (props.disabled ? 0.5 : 1)};  color: ${props => colors[props.color]};  background-color: ${props => colors[props.backgroundColor]};  border-radius: ${props => (props.rounded ? '20px' : '5px')};  border-style: solid;  border-width: ${props => (props.rounded ? '3px' : '3px')};  border-color: ${props => colors[props.borderColor]};  box-shadow: ${props =>    props.shadow ? `0 0 20px 0 ${colors[props.borderColor]}` : '0'};  justify-content: center;  align-items: center;  :hover {    box-shadow: 0 0 20px 0 transparent;    color: ${props =>      props.hoverColor ? colors[props.hoverColor] : colors[props.whiteColor]};    background-color: ${props =>      props.hoverBackgroundColor        ? colors[props.hoverBackgroundColor]        : colors[props.backgroundColor]};    border-color: ${props =>      props.hoverBackgroundColor        ? colors[props.hoverBackgroundColor]        : colors[props.borderColor]};  }`const selectColor = (nature, disabled, small) => {  switch (nature) {    case 'light':      return {        color: 'blackColor',        backgroundColor: 'whiteColor',        borderColor: 'mainColor',        hoverBackgroundColor: 'mainColor',        shadow: true      }    case 'primary':      return {        color: 'whiteColor',        backgroundColor: 'mainColor',        borderColor: 'mainColor',        hoverColor: 'blackColor',        hoverBackgroundColor: 'whiteColor',        shadow: true      }    case 'green':      return {        color: 'blackColor',        backgroundColor: 'greenColor',        borderColor: 'mainColor',        hoverColor: 'blackColor',        hoverBackgroundColor: 'whiteColor',        shadow: true,        disabled: true      }    case 'flat':      return {        color: 'whiteColor',        backgroundColor: 'transparent',        borderColor: 'mainColor',        hoverBackgroundColor: 'mainColor',        shadow: false      }    default:      return {        color: 'blackColor',        backgroundColor: 'whiteColor',        borderColor: 'whiteColor',        shadow: true      }  }}const Button = props => {  const { children, nature, disabled, small, ...rest } = props  const {    color,    backgroundColor,    borderColor,    hoverColor,    hoverBackgroundColor,    shadow  } = selectColor(nature, small)  return (    <BaseButton      {...rest}      disabled={disabled}      color={color}      shadow={shadow}      backgroundColor={backgroundColor}      borderColor={borderColor}      hoverBackgroundColor={hoverBackgroundColor}      hoverColor={hoverColor}    >      {children}{' '}    </BaseButton>  )}Button.propTypes = {  nature: PropTypes.oneOf(['light', 'primary', 'flat', 'green', 'default']),  fullwidth: PropTypes.bool,  disabled: PropTypes.bool,  rounded: PropTypes.bool,  bold: PropTypes.bool,  small: PropTypes.bool,  uppercase: PropTypes.bool,  capitalize: PropTypes.bool,  width: PropTypes.string,  padding: PropTypes.string,  margin: PropTypes.string,  href: PropTypes.string,  shadow: PropTypes.bool,  size: PropTypes.string}Button.defaultProps = {  nature: 'default',  fullwidth: false,  disabled: false,  small: false,  rounded: false,  bold: false,  uppercase: true,  capitalize: false,  height: '40px',  href: '',  shadow: true,  size: '12px'}export default Button